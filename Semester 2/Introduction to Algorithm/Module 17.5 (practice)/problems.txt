Ford-Bellman

Time limit 1 second

Memory limit 64 MiB
Given a directed graph, that can contain multiple edges and loops. Each edge has a weight that is expressed by a number (possibly negative). It is guaranteed that there are no cycles of negative weight.

Calculate the length of the shortest paths from the vertex number 1 to all other vertices.

Input data
First the number of vertices n (1 ≤ n ≤ 100) is given. It is followed by the number of edges m (0 ≤ m ≤ 10000). Next m triples describe the edges: beginning of the edge, the end of the edge and its weight (an integer from -100 to 100).

Output data
Print n numbers - the distance from the vertex number 1 to all other vertices of the graph. If the path to the corresponding vertex does not exist, instead of the path length print the number 30000.

Examples
Input example #1 content_copy
4 5
1 2 10
2 3 10
1 3 100
3 1 -10
2 3 1
Output example #1 content_copy
0 10 11 30000


Floyd - 1

Time limit 1 second

Memory limit 128 MiB
The complete directed weighted graph is given with the weighted matrix. Construct a matrix of shortest paths between its vertices. It is guaranteed that the graph does not contain cycles of negative weight.

Input data
The first line contains the number of vertices n (1 ≤ n ≤ 100) in a graph. Each of the next n lines contains n numbers and describes the weighted matrix (the j-th number in the i-th row gives the weight of the edge from vertex i to vertex j). All the numbers by the absolute value do not exceed 100. The numbers on the main diagonal are always zero.

Output data
Print n rows with n numbers - the matrix of shortest distances between pairs of vertices. The j-th number of the i-th row must be equal to the weight of the shortest path from vertex i to vertex j.


Examples
Input example #1 content_copy
4
0 5 9 100
100 0 2 8
100 100 0 7
4 100 100 0
Output example #1 content_copy
0 5 7 13
12 0 2 8
11 16 0 7
4 9 11 0

Given a directed weighted graph. Find a pair of vertices, the shortest distance from one of them to another is maximum among all pairs of vertices.

Input data
The first line contains the number of vertices n (1 ≤ n ≤ 100). The next n lines of n numbers describe the weighted matrix. Here -1 means no edges between vertices, and any non-negative number - the presence of an edge of given weight. All elements on the main diagonal are always zero.

Output data
Print the desired maximum shortest distance.


Examples
Input example #1 content_copy
4
0 5 9 -1
-1 0 2 8
-1 -1 0 7
4 -1 -1 0
Output example #1 content_copy
16


Bellman Ford
Contributed by
Hardik Aggarwal
Medium
0/80
30 mins
70 %
46 upvotes
Problem Statement



Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4 4 1
1 2 4
1 3 3
2 4 7 
3 4 -2
Sample Output 1 :
0 4 3 1
Explanation For Sample Output 1 :

In the above graph: 

The length of the shortest path between vertex 1 and vertex 1 is 1->1 and the cost is 0.

The length of the shortest path between vertex 1 and vertex 2 is 1->2 and the cost is 4.

The length of the shortest path between vertex 1 and vertex 3 is 1->3 and the cost is 3.

The length of the shortest path between vertex 1 and vertex 4 is 1->3->4 and the cost is 1.

Hence we return [0, 4, 3, 1].
Sample Input 2 :
2 1 1
2 1 3
Sample Output 2 :
0 1000000000
Constraints :
1 <= N <= 50
1 <= M <= 300
1 <= src <= N
1 <= u,v <= N
-10^5 <= w <= 10^5

Time Limit: 1 sec