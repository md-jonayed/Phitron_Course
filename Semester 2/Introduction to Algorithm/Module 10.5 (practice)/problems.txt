Question: You will be given an undirected weighted graph. At first you will be given N, the number of nodes then you will be given M, the number of edges. The value of nodes are from 1 to N. Next M lines will contain A, B and W which means there is an edge from A to B where the cost is W. There will be no negative weight in the graph.
Also, you will be given a source and a destination. You need to tell the shortest distance between source and destination.
Sample Input
Sample Output
6 9
1 2 5
2 3 2
1 3 10
3 4 1
4 1 5
1 5 9
5 6 1
2 6 4
2 5 2
4 6
6

The shortest path is 4-> 3-> 2-> 5-> 6, so the shortest distance is 6.



Question: You will be given a directed weighted graph. At first you will be given N, the number of nodes then you will be given M, the number of edges. The value of nodes are from 1 to N. Next M lines will contain A, B and W which means there is an edge from A to B where the cost is W. There will be no negative weight in the graph.
Also, you will be given a source and a destination. You need to tell the shortest distance between source and destination.
Sample Input
Sample Output
6 9
1 2 5
2 3 2
1 3 10
3 4 1
4 1 5
1 5 9
5 6 1
2 6 4
2 5 2
4 6
13

The shortest path is 4-> 1-> 2-> 5-> 6, so the shortest distance is 13.


Question: You are given a 2D grid which will contain only the characters ‘s’, ‘.’, ‘x’ and ‘e’. The size of the grid is N*M squares, where ‘s’ means where you should start, ‘.’ means there is a path, ‘x’ means there is no path and ‘e’ means where you should stop. You can walk left, right, up, and down through the cell of squares. You need to say “YES” if you can go from ‘S’ to ‘E’. Otherwise print “NO”. There will be exactly one ‘s’ and one ‘e’. If there is no path, print -1.
Note: Try to solve this using both BFS and DFS as you don’t need the shortest distance.
Sample Input
Sample Output
6 5
.s.x.
...x.
..x..
..x..
..xex
.....
YES
5 5
.s.x.
...x.
..x..
..x..
..xex
NO
5 5
.....
.....
.x..e
s.x..
....x
YES



Question: You are given a 2D grid which will contain only the characters ‘s’, ‘.’, ‘x’ and ‘e’. The size of the grid is N*M squares, where ‘s’ means where you should start, ‘.’ means there is a path, ‘x’ means there is no path and ‘e’ means where you should stop. You can walk left, right, up, and down through the cell of squares. You need to tell the minimum number of steps you need to go from ‘S’ to ‘E’. There will be exactly one ‘s’ and one ‘e’. If there is no path, print -1.

Sample Input
Sample Output
6 5
.s.x.
...x.
..x..
..x..
..xex
.....
8
5 5
.s.x.
...x.
..x..
..x..
..xex
-1
5 5
.....
.....
.x..e
s.x..
....x
7



Question: You are given a 2D grid which will contain only the characters ‘s’, ‘.’, ‘x’ and ‘e’. The size of the grid is N*M squares, where ‘s’ means where you should start, ‘.’ means there is a path, ‘x’ means there is no path and ‘e’ means where you should stop. You can walk left, right, up, and down through the cell of squares. You need to tell the minimum number of steps you need to go from ‘S’ to ‘E’ and also you need to print the path in the form of R(Right), L(Left), U(Up) and D(Down) from source to destination. There will be exactly one ‘s’ and one ‘e’. If there is no path, print -1.
Sample Input
Sample Output
6 5
.s.x.
...x.
..x..
..x..
..xex
.....
8
DDDDDRRU
5 5
.s.x.
...x.
..x..
..x..
..xex
-1
5 5
.....
.....
.x..e
s.x..
....x
7
UURRRRD

